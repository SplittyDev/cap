use anyhow::Context;
use log::warn;
use serde::Deserialize;
use std::{collections::HashMap, fs::read_to_string};

use super::{LocalPackageMetadataScraper, PackageExecutable, PackageKey};

#[derive(Debug, Deserialize)]
pub struct CratesMetadataToml {
    #[serde(rename = "v1")]
    packages: HashMap<String, Vec<String>>,
}

/// An efficient package metadata scraper that reads the
/// `.crates.toml` file generated by cargo.
///
/// This is a lot faster than the binary invocation-based approach used
/// in the `BinaryInvocationScraper`, and the gathered information is
/// a lot more accurate. This is the default scraper.
pub struct CargoMetadataScraper;

impl LocalPackageMetadataScraper for CargoMetadataScraper {
    fn scrape() -> anyhow::Result<HashMap<PackageKey, Vec<PackageExecutable>>> {
        // Get cargo .crates.toml path
        let cargo_home_dir = home::cargo_home().context("Unable to find cargo home dir.")?;
        let crates_toml_path = cargo_home_dir.join(".crates.toml");

        // Read .crates.toml file into struct
        let crates_toml_str = read_to_string(crates_toml_path)?;
        let metadata: CratesMetadataToml = toml::from_str(&crates_toml_str)?;

        // Transform hashmap
        let hashmap =
            metadata
                .packages
                .into_iter()
                .fold(HashMap::new(), |mut map, (package, binaries)| match package
                    .splitn(3, ' ')
                    .collect::<Vec<_>>()[..]
                {
                    [name, version, _] => {
                        let Ok(version) = semver::Version::parse(version) else { return map };
                        let package_key = PackageKey::new(name, version);
                        let executables =
                            binaries.into_iter().map(PackageExecutable::new).collect();
                        map.insert(package_key, executables);
                        map
                    }
                    _ => {
                        warn!(
                            "Unable to parse package name and version from string: {}",
                            package
                        );
                        map
                    }
                });

        Ok(hashmap)
    }
}
